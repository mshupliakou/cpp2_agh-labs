# ============================================================================
# üì¶ CMakeLists.txt ‚Äî Szablon edukacyjny z komentarzami i flagami
# ============================================================================

cmake_minimum_required(VERSION 3.10)
project(template_project LANGUAGES CXX)

# ============================================================================
# üéõÔ∏è OPCJE U≈ªYTKOWNIKA (ustawiane przy konfiguracji, np. cmake .. -DDEBUG_MODE=ON)
# ============================================================================
option(COMPILATION_ISSUE "Enable artificial compilation issue (for testing)" OFF)
option(DEBUG_MODE "Enable debug logging code" OFF)

# ============================================================================
# üõë ZABEZPIECZENIE przed budowaniem w katalogu ≈∫r√≥d≈Çowym
# ============================================================================
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
set(CMAKE_DISABLE_SOURCE_CHANGES ON)

if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
    message(SEND_ERROR "üõë Nie buduj w katalogu ≈∫r√≥d≈Çowym! U≈ºyj mkdir build && cd build && cmake ..")
endif()

# ============================================================================
# üß† WYB√ìR STANDARDU C++ I FLAGR KOMPILATORA
# ============================================================================
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)  # Bez GNU extensions typu gnu++17

# Przyk≈Çadowe flagi (Debug/Release mogƒÖ byƒá nadpisane przez -DCMAKE_BUILD_TYPE)
set(CMAKE_BUILD_TYPE Debug)

# Flagi domy≈õlne (Debug / Release)
set(CMAKE_CXX_FLAGS_DEBUG_INIT "-Wall -Wextra -pedantic -g")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "-O2 -Wall")

# ============================================================================
# üìÅ STRUKTURA KATALOG√ìW PROJEKTU
# ============================================================================
# include/ zawiera nag≈Ç√≥wki, src/ zawiera ≈∫r√≥d≈Ça
set(INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include")
set(SOURCE_DIR "${PROJECT_SOURCE_DIR}/src")

# Dodaj katalog nag≈Ç√≥wk√≥w do include paths
include_directories(${INCLUDE_DIR})

# Zbieramy wszystkie pliki .cpp w katalogu src/
file(GLOB SOURCES "${SOURCE_DIR}/*.cpp")

# ============================================================================
# üî® TWORZENIE PROGRAMU WYKONYWALNEGO
# ============================================================================
add_executable(${PROJECT_NAME}
    Main.cpp
    ${SOURCES}
)

# ============================================================================
# üìå FLAGI KOMPILATORA ‚Äî MANUALNE DODAWANIE
# ============================================================================
# Mo≈ºemy rƒôcznie dodaƒá dowolne flagi:
target_compile_options(${PROJECT_NAME} PRIVATE
    # zawsze do≈ÇƒÖcz te ostrze≈ºenia
    -Wall -Wextra -pedantic

    # opcjonalnie inne, zale≈ºnie od build type
    $<$<CONFIG:Debug>:-DDEBUG_BUILD=1>
    $<$<CONFIG:Release>:-DNDEBUG>
)

# ============================================================================
# üîñ W≈ÅASNE DEFINE Z PODSTAWIENIEM ≈öCIE≈ªKI
# ============================================================================
# Dodajemy flagƒô kompilatora PROJECTPATH="..." jako string
target_compile_definitions(${PROJECT_NAME} PRIVATE
    PROJECTPATH="${PROJECT_SOURCE_DIR}"
)

# W kodzie ≈∫r√≥d≈Çowym:
#   std::cout << "Project root: " << PROJECTPATH << "\n";

# ============================================================================
# üí° WARUNKOWE DEFINICJE Z OPCJI KONFIGURACYJNYCH
# ============================================================================
if(COMPILATION_ISSUE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE COMPILATION_ISSUE=1)
endif()

if(DEBUG_MODE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE DEBUG_MODE=1)
endif()

# ============================================================================
# üß™ PRZYK≈ÅADOWE U≈ªYCIE OPCJI W KODZIE C++:
# ============================================================================
# #ifdef DEBUG_MODE
#     std::cerr << "Debug info enabled!\n";
# #endif
#
# #ifdef COMPILATION_ISSUE
#     static_assert(false, "Ta linia wymusza b≈ÇƒÖd kompilacji");
# #endif

# ============================================================================
# üõ†Ô∏è PRZYK≈ÅADOWA KONFIGURACJA W TERMINALU
# ============================================================================
# mkdir build
# cd build
# cmake .. -G Ninja -DDEBUG_MODE=ON -DCMAKE_BUILD_TYPE=Release
# cmake --build .
# ./template_project
# ============================================================================

